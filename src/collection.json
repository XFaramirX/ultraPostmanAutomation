{
	"info": {
		"_postman_id": "2f5d098d-1ecc-4a27-bf5d-2ca714b11453",
		"name": "GoRest Api",
		"description": "Online REST API for Testing and Prototyping Testing Endpoints with postman. https://gorest.co.in/",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test User Flow",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"\r",
									"pm.environment.set(\"userGender\", _.sample([\r",
									"    'male',\r",
									"    'female',\r",
									"]));\r",
									"\r",
									"pm.environment.set(\"userStatus\", _.sample([\r",
									"    'active',\r",
									"    'inactive',\r",
									"]));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Running general common test from collection pre-request script \r",
									"eval(pm.environment.get(\"commonTestScript\"))();\r",
									"\r",
									"//Endpoint Test    \r",
									"pm.test(\"Succesfull POST request Status code should be 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{userName}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{userEmail}}",
									"type": "text"
								},
								{
									"key": "status",
									"value": "{{userStatus}}",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "{{userGender}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//Running general common test from collection pre-request script\r",
									"eval(pm.environment.get(\"commonTestScript\"))();\r",
									"\r",
									"\r",
									"//Endpoint Test    \r",
									"pm.test(\"Succesfull PATCH request Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/users/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userStatus = pm.environment.get(\"userStatus\");\r",
									"//Changing User status\r",
									"(userStatus == \"inactive\") ? userStatus = pm.environment.set(\"userStatus\", \"active\") : pm.environment.set(\"userStatus\", \"inactive\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Running general common test from collection pre-request script\r",
									"eval(pm.environment.get(\"commonTestScript\"))();\r",
									"\r",
									"//Endpoint Test    \r",
									"pm.test(\"Succesfull PATCH request Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{userName}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{userEmail}}",
									"type": "text"
								},
								{
									"key": "status",
									"value": "{{userStatus}}",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "{{userGender}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"pm.test(\"Response time is less than 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/users/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{bearerToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var commonTestScript = () => {",
							"    //Getting Response Data",
							"    const jsonData = pm.response.json();",
							"",
							"    // Obtaining and setting variables to make assertions on request response.",
							"    let userId = jsonData.data.id;",
							"    let userName = pm.environment.get(\"userName\");",
							"    let userEmail = pm.environment.get(\"userEmail\");",
							"    let userGender = pm.environment.get(\"userGender\");",
							"    let userStatus = pm.environment.get(\"userStatus\");",
							"",
							"    pm.environment.set(\"userId\", userId);",
							"",
							"    // Test Cases",
							"    pm.test(\"The Response Should have all properties\", function () {",
							"        pm.expect(jsonData.data.id).to.be.an(\"number\")",
							"        pm.expect(jsonData.data.name).to.eql(userName).to.be.an(\"string\");",
							"        pm.expect(jsonData.data.email).to.eql(userEmail).to.be.an(\"string\");;",
							"        pm.expect(jsonData.data.gender).to.eql(userGender).to.be.an(\"string\");;",
							"        pm.expect(jsonData.data.status).to.eql(userStatus).to.be.an(\"string\");;",
							"    });",
							"",
							"    pm.test(\"Meta property should be null\", function () {",
							"        pm.expect(jsonData.meta).to.eql(null)",
							"    });",
							"",
							"    pm.test(\"Response time is less than 3segs\", function () {",
							"        pm.expect(pm.response.responseTime).to.be.below(3000);",
							"    });",
							"}",
							"",
							"pm.environment.set(\"commonTestScript\", commonTestScript.toString())",
							"",
							"",
							"//Getting Current TOTAL users in DB",
							"pm.sendRequest('https://gorest.co.in/public/v1/users', (error, response) => {",
							"    if (error) {",
							"        console.log(error);",
							"    } else {",
							"        pm.environment.set(\"totalUsers\", response.json().meta.pagination.total)",
							"    }",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Flows",
			"item": [
				{
					"name": "User Create - 422 - Empty values",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Invalid POST POST request Status code should be 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Fields can not be blank message is display for all fields\", function () {\r",
									"    pm.expect(jsonData.data[0].field).to.eql(\"email\");\r",
									"    pm.expect(jsonData.data[0].message).to.eql(\"can't be blank\");\r",
									"\r",
									"    pm.expect(jsonData.data[1].field).to.eql(\"name\");\r",
									"    pm.expect(jsonData.data[1].message).to.eql(\"can't be blank\");\r",
									"\r",
									"    pm.expect(jsonData.data[2].field).to.eql(\"gender\");\r",
									"    pm.expect(jsonData.data[2].message).to.eql(\"can't be blank\");\r",
									"\r",
									"    pm.expect(jsonData.data[3].field).to.eql(\"status\");\r",
									"    pm.expect(jsonData.data[3].message).to.eql(\"can't be blank\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "",
									"type": "text"
								},
								{
									"key": "email",
									"value": "",
									"type": "text"
								},
								{
									"key": "status",
									"value": "",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Create - 422 - Wrong email address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"userEmail\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"\r",
									"pm.environment.set(\"userGender\", _.sample([\r",
									"    'male',\r",
									"    'female',\r",
									"]));\r",
									"\r",
									"pm.environment.set(\"userStatus\", _.sample([\r",
									"    'active',\r",
									"    'inactive',\r",
									"]));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"//Endpoint Test    \r",
									"pm.test(\"Invalid POST request Status code should be 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Email is invalid error message is displayed\", function () {\r",
									"    pm.expect(jsonData.data[0].field).to.eql(\"email\");\r",
									"    pm.expect(jsonData.data[0].message).to.eql(\"is invalid\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{userName}} ",
									"type": "text"
								},
								{
									"key": "email",
									"value": "WrongEmail.test.com",
									"type": "text"
								},
								{
									"key": "status",
									"value": "{{userStatus}}",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "{{userGender}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Create - 401- Authentication failed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Invalid POST request Status code should be 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});  \r",
									"\r",
									"pm.test(\"Authentication failed error message is displayed\", function () {\r",
									"    pm.expect(jsonData.data.message).to.eql(\"Authentication failed\")\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "Wrong Auth",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{userNamel}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{userEmail}}",
									"type": "text"
								},
								{
									"key": "status",
									"value": "{{userStatus}}",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "{{userGender}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Create - 422 - Use existing email address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"//Endpoint Test    \r",
									"pm.test(\"Invalid POST request Status code should be 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Email has already been taken failed error message is displayed\", function () {\r",
									"    pm.expect(jsonData.data[0].message).to.eql(\"has already been taken\")\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{userName}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "Reginald.Grady70@yahoo.com",
									"type": "text"
								},
								{
									"key": "status",
									"value": "{{userStatus}}",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "{{userGender}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Get - 404 - Non existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Non existing user GET request Status code should be 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.message).to.eql(\"Resource not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/users/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "nonexisting"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - 404 - Non existing user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Non existing user GET request Status code should be 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.message).to.eql(\"Resource not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 396318a58523747970b86a314353bf71aab60c705e1e45d1a074f3ce824a064f"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{userName}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{userEmail}}",
									"type": "text"
								},
								{
									"key": "status",
									"value": "{{userStatus}}",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "{{userGender}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "NonExisting"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "orderId",
			"value": ""
		}
	]
}